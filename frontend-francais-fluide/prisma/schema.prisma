// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  emailVerifiedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  progress UserProgress?
  subscription Subscription?
  passwordResetToken PasswordResetToken?
  emailVerificationToken EmailVerificationToken?
  grammarChecks GrammarCheck[]

  @@map("users")
}

model UserProgress {
  id              String   @id @default(cuid())
  userId          String   @unique
  wordsWritten    Int      @default(0)
  accuracy        Float    @default(0)
  timeSpent       Int      @default(0) // en minutes
  exercisesCompleted Int   @default(0)
  currentStreak   Int      @default(0)
  level           Int      @default(1)
  xp              Int      @default(0)
  lastActivity    DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_progress")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model GrammarCheck {
  id          String   @id @default(cuid())
  userId      String
  text        String
  errors      Json
  suggestions Json
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("grammar_checks")
}

model Subscription {
  id                    String    @id @default(cuid())
  userId                String    @unique
  plan                  String    // demo, etudiant, premium, etablissement
  status                String    // active, pending, cancelled, expired
  startDate             DateTime
  endDate               DateTime
  stripeSubscriptionId  String?
  stripePaymentIntentId String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}