# docker-compose.yml pour FrançaisFluide
# Configuration complète pour le déploiement de production

version: '3.8'

services:
  # Frontend Next.js
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        - NODE_ENV=production
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_SENTRY_DSN=${SENTRY_DSN}
      - NEXT_PUBLIC_GA_ID=${GA_ID}
      - NEXT_PUBLIC_PLAUSIBLE_DOMAIN=${PLAUSIBLE_DOMAIN}
    depends_on:
      - backend
      - redis
      - postgres
    volumes:
      - ./logs:/app/logs
    networks:
      - francais-fluide
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API (si applicable)
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    ports:
      - '8000:8000'
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://francais_fluide:${POSTGRES_PASSWORD}@postgres:5432/francais_fluide
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - francais-fluide
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=francais_fluide
      - POSTGRES_USER=francais_fluide
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - '5432:5432'
    networks:
      - francais-fluide
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U francais_fluide -d francais_fluide']
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - francais-fluide
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - francais-fluide
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'wget', '--quiet', '--tries=1', '--spider', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - francais-fluide
    restart: unless-stopped

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - francais-fluide
    restart: unless-stopped

  # Logs centralisés avec ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
    networks:
      - francais-fluide
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/var/log/francais-fluide
    depends_on:
      - elasticsearch
    networks:
      - francais-fluide
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - francais-fluide
    restart: unless-stopped

  # Backup automatique
  backup:
    build:
      context: ./scripts/backup
      dockerfile: Dockerfile
    volumes:
      - postgres_data:/backup/postgres
      - redis_data:/backup/redis
      - ./backups:/backups
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - francais-fluide
    restart: unless-stopped
    # Exécution quotidienne à 2h du matin
    deploy:
      restart_policy:
        condition: none
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Health checks et monitoring
  healthcheck:
    build:
      context: ./scripts/healthcheck
      dockerfile: Dockerfile
    environment:
      - FRONTEND_URL=http://frontend:3000
      - BACKEND_URL=http://backend:8000
      - DATABASE_URL=postgresql://francais_fluide:${POSTGRES_PASSWORD}@postgres:5432/francais_fluide
      - REDIS_URL=redis://redis:6379
      - SLACK_WEBHOOK=${SLACK_WEBHOOK}
      - EMAIL_ALERTS=${EMAIL_ALERTS}
    depends_on:
      - frontend
      - backend
      - postgres
      - redis
    networks:
      - francais-fluide
    restart: unless-stopped

# Volumes persistants
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# Réseau privé
networks:
  francais-fluide:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
