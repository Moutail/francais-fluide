'use client';

import React, { useState, useEffect } from 'react';
import { Card, Button, Badge } from '@/components/ui';
import AnalyticsDashboard from '@/components/analytics/AnalyticsDashboard';
import type { UserProfile, ExerciseResult, ProgressData } from '@/types';

// Donn√©es mock√©es pour les tests
const mockUserProfile: UserProfile = {
  id: 'user-1',
  name: 'Utilisateur Test',
  email: 'test@example.com',
  level: 'intermediate',
  weaknesses: [],
  strengths: [],
  preferences: {
    difficulty: 'intermediate',
    exerciseTypes: ['grammar', 'vocabulary'],
    realTimeCorrection: true,
    soundEffects: true,
    animations: true,
    notifications: true
  },
  statistics: {
    totalWords: 0,
    totalErrors: 0,
    totalCorrections: 0,
    accuracyRate: 0,
    dailyStreak: 0,
    bestStreak: 0,
    totalPracticeTime: 0,
    lastPracticeDate: new Date(),
    progressByCategory: {},
    completedExercises: 0,
    xp: 0,
    nextLevelXp: 1000
  }
};

// G√©n√©rer des donn√©es d'exercices mock√©es
const generateMockExerciseResults = (): ExerciseResult[] => {
  const results: ExerciseResult[] = [];
  const now = new Date();
  
  for (let i = 0; i < 50; i++) {
    const daysAgo = Math.floor(Math.random() * 90);
    const date = new Date(now.getTime() - daysAgo * 24 * 60 * 60 * 1000);
    
    const baseScore = 60 + Math.random() * 30;
    const improvement = Math.min(20, daysAgo * 0.2); // Am√©lioration au fil du temps
    const score = Math.min(100, baseScore + improvement);
    
    results.push({
      exerciseId: `exercise-${i}`,
      score: Math.round(score),
      maxScore: 100,
      timeSpent: 120 + Math.random() * 300, // 2-7 minutes
      answers: Array.from({ length: 5 }, (_, j) => ({
        questionId: `q-${j}`,
        answer: `Answer ${j}`,
        isCorrect: Math.random() > 0.3, // 70% de r√©ussite
        timeSpent: 10 + Math.random() * 30
      })),
      completedAt: date.toISOString(),
      accuracy: Math.min(1, 0.6 + Math.random() * 0.3 + improvement / 100)
    });
  }
  
  return results.sort((a, b) => new Date(a.completedAt).getTime() - new Date(b.completedAt).getTime());
};

// G√©n√©rer des donn√©es de progression mock√©es
const generateMockProgressData = (): ProgressData[] => {
  const data: ProgressData[] = [];
  const now = new Date();
  
  for (let i = 0; i < 30; i++) {
    const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);
    
    data.push({
      userId: 'user-1',
      exerciseId: `exercise-${i}`,
      score: 70 + Math.random() * 25,
      timeSpent: 180 + Math.random() * 240,
      completedAt: date,
      errors: ['Conjugaison', 'Accords', 'Vocabulaire'].slice(0, Math.floor(Math.random() * 3)),
      improvements: ['Pr√©cision', 'Vitesse'].slice(0, Math.floor(Math.random() * 2))
    });
  }
  
  return data;
};

export default function AnalyticsPage() {
  const [exerciseResults, setExerciseResults] = useState<ExerciseResult[]>([]);
  const [progressData, setProgressData] = useState<ProgressData[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);

  // G√©n√©rer les donn√©es mock√©es
  const generateMockData = () => {
    setIsGenerating(true);
    
    // Simuler un d√©lai de g√©n√©ration
    setTimeout(() => {
      setExerciseResults(generateMockExerciseResults());
      setProgressData(generateMockProgressData());
      setIsGenerating(false);
    }, 1000);
  };

  // G√©n√©rer les donn√©es au montage
  useEffect(() => {
    generateMockData();
  }, []);

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-7xl mx-auto">
        {/* En-t√™te */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            Dashboard Analytique
          </h1>
          <p className="text-gray-600 text-lg">
            Analysez vos performances et progressez dans l'apprentissage du fran√ßais
          </p>
        </div>

        {/* Contr√¥les */}
        <Card className="p-6 mb-8">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Donn√©es de Test
              </h3>
              <p className="text-sm text-gray-600">
                {exerciseResults.length} exercices ‚Ä¢ {progressData.length} entr√©es de progression
              </p>
            </div>
            
            <div className="flex gap-2">
              <Button
                onClick={generateMockData}
                disabled={isGenerating}
                variant="outline"
              >
                {isGenerating ? 'G√©n√©ration...' : 'üîÑ R√©g√©n√©rer les donn√©es'}
              </Button>
              
              <Button
                onClick={() => {
                  setExerciseResults([]);
                  setProgressData([]);
                }}
                variant="outline"
                className="text-red-600 hover:text-red-700"
              >
                üóëÔ∏è Effacer les donn√©es
              </Button>
            </div>
          </div>
        </Card>

        {/* Dashboard principal */}
        <AnalyticsDashboard
          userProfile={mockUserProfile}
          exerciseResults={exerciseResults}
          progressData={progressData}
        />

        {/* Informations sur les fonctionnalit√©s */}
        <Card className="p-6 mt-8 bg-blue-50">
          <h3 className="text-lg font-semibold text-blue-900 mb-4">
            üéØ Fonctionnalit√©s du Dashboard
          </h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div>
              <h4 className="font-semibold text-blue-800 mb-2">üìä Vue d'ensemble</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ M√©triques principales</li>
                <li>‚Ä¢ Score d'engagement</li>
                <li>‚Ä¢ Pattern d'apprentissage</li>
                <li>‚Ä¢ Recommandations</li>
              </ul>
            </div>
            
            <div>
              <h4 className="font-semibold text-blue-800 mb-2">üìà Progression</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ Courbes de progression</li>
                <li>‚Ä¢ √âvolution des scores</li>
                <li>‚Ä¢ Tendance de pr√©cision</li>
                <li>‚Ä¢ Pr√©dictions</li>
              </ul>
            </div>
            
            <div>
              <h4 className="font-semibold text-blue-800 mb-2">‚ùå Analyse d'erreurs</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ Distribution par cat√©gorie</li>
                <li>‚Ä¢ Tendances d'erreurs</li>
                <li>‚Ä¢ S√©v√©rit√© des probl√®mes</li>
                <li>‚Ä¢ D√©tail des faiblesses</li>
              </ul>
            </div>
            
            <div>
              <h4 className="font-semibold text-blue-800 mb-2">üìÖ Activit√©</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ Calendrier d'activit√©</li>
                <li>‚Ä¢ Heatmap des sessions</li>
                <li>‚Ä¢ Patterns de pratique</li>
                <li>‚Ä¢ R√©gularit√©</li>
              </ul>
            </div>
            
            <div>
              <h4 className="font-semibold text-blue-800 mb-2">üéØ Comparaison</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ Radar de comp√©tences</li>
                <li>‚Ä¢ Comparaison avec la moyenne</li>
                <li>‚Ä¢ Classement</li>
                <li>‚Ä¢ Objectifs</li>
              </ul>
            </div>
            
            <div>
              <h4 className="font-semibold text-blue-800 mb-2">üîß Calculs avanc√©s</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ D√©tection de patterns</li>
                <li>‚Ä¢ Score de r√©gularit√©</li>
                <li>‚Ä¢ Pr√©dictions ML</li>
                <li>‚Ä¢ Recommandations IA</li>
              </ul>
            </div>
          </div>
        </Card>

        {/* Instructions de test */}
        <Card className="p-6 mt-8 bg-yellow-50">
          <h3 className="text-lg font-semibold text-yellow-900 mb-3">
            üìã Instructions de Test
          </h3>
          <div className="text-sm text-yellow-800 space-y-2">
            <p>1. <strong>G√©n√©rez des donn√©es</strong> en cliquant sur "R√©g√©n√©rer les donn√©es"</p>
            <p>2. <strong>Explorez les onglets</strong> pour voir diff√©rents types d'analyses</p>
            <p>3. <strong>Changez la p√©riode</strong> pour voir l'√©volution des donn√©es</p>
            <p>4. <strong>Observez les animations</strong> et interactions des graphiques</p>
            <p>5. <strong>Testez la responsivit√©</strong> en redimensionnant la fen√™tre</p>
            <p>6. <strong>Analysez les patterns</strong> d'apprentissage d√©tect√©s</p>
          </div>
        </Card>
      </div>
    </div>
  );
}
