// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("user") // user, admin, super_admin, tester, teacher
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  progress      UserProgress?
  subscription  Subscription?
  achievements  UserAchievement[]
  submissions   ExerciseSubmission[]
  conversations Conversation[]
  usageLogs     UsageLog[]
  calendarEvents CalendarEvent[]
  documents     Document[]
  telemetryEvents TelemetryEvent[]
  supportTickets SupportTicket[]
  exercises     Exercise[]
  dailyUsage    DailyUsage[]

  @@map("users")
}

model UserProgress {
  id               String   @id @default(cuid())
  userId           String   @unique
  wordsWritten     Int      @default(0)
  accuracy         Float    @default(0)
  timeSpent        Int      @default(0) // en minutes
  exercisesCompleted Int    @default(0)
  currentStreak    Int      @default(0)
  level            Int      @default(1)
  xp               Int      @default(0)
  lastActivity     DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_progress")
}

model Subscription {
  id                    String    @id @default(cuid())
  userId                String    @unique
  plan                  String    // demo, etudiant, premium, etablissement
  status                String    // active, pending, cancelled, expired
  startDate             DateTime
  endDate               DateTime
  stripeSubscriptionId  String?
  stripePaymentIntentId String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String   // words_written, exercises_completed, streak, level, accuracy
  threshold   Int
  icon        String?
  createdAt   DateTime @default(now())

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime    @default(now())

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement  @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Exercise {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // grammar, vocabulary, conjugation, comprehension
  level       Int      @default(1)
  difficulty  String   // easy, medium, hard
  userId      String?  // ID de l'utilisateur qui a créé l'exercice (null pour les exercices par défaut)
  isGenerated Boolean  @default(false) // true si généré par l'IA
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  questions   Question[]
  submissions ExerciseSubmission[]
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("exercises")
}

model Question {
  id          String   @id @default(cuid())
  exerciseId  String
  question    String
  options     String   // JSON string of options
  correctAnswer String
  explanation String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model ExerciseSubmission {
  id          String   @id @default(cuid())
  userId      String
  exerciseId  String
  answers     String   // JSON string of answers
  score       Int      // Score out of 100
  timeSpent   Int      @default(0) // en secondes
  completedAt DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("exercise_submissions")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // user, assistant
  content        String
  context        String?  // JSON string of context
  createdAt      DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model UsageLog {
  id        String   @id @default(cuid())
  userId    String
  type      String   // correction, exercise, ai_chat
  details   String?  // JSON string of additional details
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_logs")
}

model Dictation {
  id          String   @id @default(cuid())
  title       String
  description String?
  difficulty  String   // beginner, intermediate, advanced
  duration    Int      // en minutes
  audioUrl    String?
  text        String
  category    String?
  tags        String?  // JSON string of tags
  completed   Boolean  @default(false)
  score       Int?
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("dictations")
}

model CalendarEvent {
  id          String    @id @default(cuid())
  userId      String
  title       String
  type        String    // exercise, study, achievement, reminder
  date        DateTime
  time        String?
  description String?
  points      Int       @default(0)
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("calendar_events")
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  type      String   // editor, exercise, dictation
  metadata  String?  // JSON string of additional data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("documents")
}

model TelemetryEvent {
  id         String   @id @default(cuid())
  userId     String
  type       String   // answer_selected, answer_changed, question_completed, question_skipped, exercise_started, exercise_finished
  timestamp  DateTime
  data       String   // JSON string of event data
  exerciseId String?
  questionId String?
  createdAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("telemetry_events")
}

model SupportTicket {
  id          String   @id @default(cuid())
  userId      String
  subject     String
  category    String   // technical, billing, feature, bug, other
  priority    String   // low, medium, high
  status      String   // open, in_progress, resolved, closed
  description String
  response    String?  // Réponse de l'équipe support
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model DailyUsage {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  aiExercisesGenerated Int @default(0)
  aiCorrectionsUsed    Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_usage")
}
