generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String               @id @default(cuid())
  email           String               @unique
  name            String
  password        String
  role            String               @default("user")
  isActive        Boolean              @default(true)
  lastLogin       DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  calendarEvents  CalendarEvent[]
  conversations   Conversation[]
  dailyUsage      DailyUsage[]
  documents       Document[]
  submissions     ExerciseSubmission[]
  exercises       Exercise[]
  subscription    Subscription?
  supportTickets  SupportTicket[]
  telemetryEvents TelemetryEvent[]
  usageLogs       UsageLog[]
  achievements    UserAchievement[]
  progress        UserProgress?

  @@map("users")
}

model UserProgress {
  id                 String    @id @default(cuid())
  userId             String    @unique
  wordsWritten       Int       @default(0)
  accuracy           Float     @default(0)
  timeSpent          Int       @default(0)
  exercisesCompleted Int       @default(0)
  currentStreak      Int       @default(0)
  level              Int       @default(1)
  xp                 Int       @default(0)
  lastActivity       DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_progress")
}

model Subscription {
  id                    String   @id @default(cuid())
  userId                String   @unique
  plan                  String
  status                String
  startDate             DateTime
  endDate               DateTime
  stripeSubscriptionId  String?
  stripePaymentIntentId String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Achievement {
  id               String            @id @default(cuid())
  name             String
  description      String
  type             String
  threshold        Int
  icon             String?
  createdAt        DateTime          @default(now())
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Exercise {
  id          String               @id @default(cuid())
  title       String
  description String?
  type        String
  level       Int                  @default(1)
  difficulty  String
  userId      String?
  isGenerated Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  submissions ExerciseSubmission[]
  user        User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions   Question[]

  @@map("exercises")
}

model Question {
  id            String   @id @default(cuid())
  exerciseId    String
  question      String
  options       String
  correctAnswer String
  explanation   String?
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  exercise      Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model ExerciseSubmission {
  id          String   @id @default(cuid())
  userId      String
  exerciseId  String
  answers     String
  score       Int
  timeSpent   Int      @default(0)
  completedAt DateTime @default(now())
  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("exercise_submissions")
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String
  content        String
  context        String?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model UsageLog {
  id        String   @id @default(cuid())
  userId    String
  type      String
  details   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_logs")
}

model Dictation {
  id          String   @id @default(cuid())
  title       String
  description String?
  difficulty  String
  duration    Int
  audioUrl    String?
  text        String
  category    String?
  tags        String?
  completed   Boolean  @default(false)
  score       Int?
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("dictations")
}

model CalendarEvent {
  id          String   @id @default(cuid())
  userId      String
  title       String
  type        String
  date        DateTime
  time        String?
  description String?
  points      Int      @default(0)
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("calendar_events")
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  type      String
  metadata  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("documents")
}

model TelemetryEvent {
  id         String   @id @default(cuid())
  userId     String
  type       String
  timestamp  DateTime
  data       String
  exerciseId String?
  questionId String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("telemetry_events")
}

model SupportTicket {
  id          String   @id @default(cuid())
  userId      String
  subject     String
  category    String
  priority    String
  status      String
  description String
  response    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model DailyUsage {
  id                   String   @id @default(cuid())
  userId               String
  date                 DateTime @default(now())
  aiExercisesGenerated Int      @default(0)
  aiCorrectionsUsed    Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_usage")
}
