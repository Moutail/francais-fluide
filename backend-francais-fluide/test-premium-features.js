#!/usr/bin/env node

// Test des fonctionnalit√©s premium et du syst√®me d'abonnements
const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3001';

async function testPremiumFeatures() {
  console.log('üëë Test des fonctionnalit√©s premium et abonnements\n');

  // Donn√©es de test
  const testUsers = [
    {
      name: 'Demo User',
      email: `demo-test-${Date.now()}@example.com`,
      password: 'TestPassword123!',
      expectedPlan: 'demo',
      shouldHaveAccess: false
    },
    {
      name: 'Premium User',
      email: `premium-test-${Date.now()}@example.com`,
      password: 'TestPassword123!',
      expectedPlan: 'premium',
      shouldHaveAccess: true
    }
  ];

  const tokens = {};

  try {
    // 1. Cr√©er et connecter les utilisateurs de test
    console.log('1Ô∏è‚É£ Cr√©ation des utilisateurs de test...');
    
    for (const userData of testUsers) {
      // Inscription
      const registerResponse = await fetch(`${BASE_URL}/api/auth/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userData)
      });

      const registerData = await registerResponse.json();
      if (!registerData.success) {
        throw new Error(`Inscription √©chou√©e pour ${userData.email}: ${registerData.error}`);
      }

      tokens[userData.expectedPlan] = registerData.token;
      console.log(`‚úÖ Utilisateur ${userData.expectedPlan} cr√©√© et connect√©`);

      // Mettre √† jour l'abonnement si n√©cessaire
      if (userData.expectedPlan === 'premium') {
        await fetch(`${BASE_URL}/api/admin/subscriptions`, {
          method: 'POST',
          headers: { 
            'Authorization': `Bearer ${tokens.premium}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            userId: registerData.user.id,
            plan: 'premium',
            status: 'active'
          })
        });
        console.log(`‚úÖ Abonnement premium activ√© pour ${userData.email}`);
      }
    }

    // 2. Test des plans d'abonnement
    console.log('\n2Ô∏è‚É£ Test des plans d\'abonnement...');
    const plansResponse = await fetch(`${BASE_URL}/api/subscription/plans`);
    const plansData = await plansResponse.json();
    
    if (plansData.success) {
      console.log('‚úÖ Plans d\'abonnement r√©cup√©r√©s');
      console.log(`   - Nombre de plans: ${plansData.data.length}`);
      
      const premiumPlan = plansData.data.find(p => p.id === 'premium');
      if (premiumPlan) {
        console.log(`   - Plan Premium trouv√©: ${premiumPlan.name}`);
        console.log(`   - Fonctionnalit√©s: ${premiumPlan.features.length}`);
        console.log(`   - Assistant dissertation inclus: ${premiumPlan.features.some(f => f.includes('dissertation'))}`);
      }
    }

    // 3. Test d'acc√®s aux types de dissertations
    console.log('\n3Ô∏è‚É£ Test d\'acc√®s aux types de dissertations...');
    
    // Test avec utilisateur demo (doit √™tre refus√©)
    const demoTypesResponse = await fetch(`${BASE_URL}/api/dissertation/types`, {
      headers: { 
        'Authorization': `Bearer ${tokens.demo}`,
        'Content-Type': 'application/json'
      }
    });

    if (demoTypesResponse.status === 403) {
      console.log('‚úÖ Acc√®s correctement refus√© pour utilisateur demo');
    } else {
      console.log('‚ö†Ô∏è Utilisateur demo a acc√®s (probl√®me de s√©curit√©)');
    }

    // Test avec utilisateur premium (doit √™tre autoris√©)
    const premiumTypesResponse = await fetch(`${BASE_URL}/api/dissertation/types`, {
      headers: { 
        'Authorization': `Bearer ${tokens.premium}`,
        'Content-Type': 'application/json'
      }
    });

    if (premiumTypesResponse.ok) {
      const typesData = await premiumTypesResponse.json();
      console.log('‚úÖ Acc√®s autoris√© pour utilisateur premium');
      console.log(`   - Types disponibles: ${typesData.data.types.length}`);
      console.log(`   - Types: ${typesData.data.types.map(t => t.id).join(', ')}`);
    } else {
      console.log('‚ùå Acc√®s refus√© pour utilisateur premium (erreur)');
    }

    // 4. Test de g√©n√©ration de plan
    console.log('\n4Ô∏è‚É£ Test de g√©n√©ration de plan de dissertation...');
    
    const planResponse = await fetch(`${BASE_URL}/api/dissertation/plan`, {
      method: 'POST',
      headers: { 
        'Authorization': `Bearer ${tokens.premium}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        type: 'argumentative',
        subject: 'Les r√©seaux sociaux sont-ils un danger pour la d√©mocratie ?',
        level: 'intermediate'
      })
    });

    if (planResponse.ok) {
      const planData = await planResponse.json();
      console.log('‚úÖ Plan de dissertation g√©n√©r√© avec succ√®s');
      console.log(`   - Titre: ${planData.data.plan.title}`);
      console.log(`   - Parties: ${planData.data.plan.plan.length}`);
      console.log(`   - G√©n√©r√© par: ${planData.data.plan.generated_by}`);
    } else {
      const errorData = await planResponse.json();
      console.log(`‚ùå Erreur g√©n√©ration plan: ${errorData.error}`);
    }

    // 5. Test d'analyse de dissertation
    console.log('\n5Ô∏è‚É£ Test d\'analyse de dissertation...');
    
    const sampleText = `Introduction

Les r√©seaux sociaux ont r√©volutionn√© notre fa√ßon de communiquer et de partager l'information. Cependant, leur impact sur la d√©mocratie suscite de nombreux d√©bats. Peut-on consid√©rer que les r√©seaux sociaux repr√©sentent un danger pour nos institutions d√©mocratiques ?

I. Les risques pour la d√©mocratie

Les r√©seaux sociaux peuvent effectivement pr√©senter des dangers pour la d√©mocratie. Premi√®rement, ils favorisent la propagation de fausses informations. Deuxi√®mement, ils cr√©ent des bulles de filtres qui polarisent les opinions.

II. Les b√©n√©fices d√©mocratiques

N√©anmoins, les r√©seaux sociaux offrent aussi des opportunit√©s d√©mocratiques. Ils permettent une participation citoyenne accrue et donnent la parole √† des voix qui √©taient auparavant marginalis√©es.

Conclusion

En conclusion, les r√©seaux sociaux ne sont ni enti√®rement b√©n√©fiques ni enti√®rement n√©fastes pour la d√©mocratie. Leur impact d√©pend largement de la fa√ßon dont nous les utilisons et les r√©gulons.`;

    const analysisResponse = await fetch(`${BASE_URL}/api/dissertation/analyze`, {
      method: 'POST',
      headers: { 
        'Authorization': `Bearer ${tokens.premium}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        text: sampleText,
        type: 'argumentative',
        subject: 'Les r√©seaux sociaux sont-ils un danger pour la d√©mocratie ?',
        options: {
          level: 'intermediate',
          checkStructure: true,
          checkStyle: true,
          checkArguments: true
        }
      })
    });

    if (analysisResponse.ok) {
      const analysisData = await analysisResponse.json();
      console.log('‚úÖ Analyse de dissertation r√©ussie');
      console.log(`   - Score global: ${analysisData.data.analysis.score_global}%`);
      console.log(`   - Points forts: ${analysisData.data.analysis.points_forts.length}`);
      console.log(`   - Points d'am√©lioration: ${analysisData.data.analysis.points_amelioration.length}`);
      console.log(`   - Analys√© par: ${analysisData.data.analysis.analyzed_by}`);
    } else {
      const errorData = await analysisResponse.json();
      console.log(`‚ùå Erreur analyse: ${errorData.error}`);
    }

    // 6. Test des quotas
    console.log('\n6Ô∏è‚É£ Test des quotas d\'utilisation...');
    
    // Test avec utilisateur demo (doit √™tre limit√©)
    const demoQuotaResponse = await fetch(`${BASE_URL}/api/dissertation/plan`, {
      method: 'POST',
      headers: { 
        'Authorization': `Bearer ${tokens.demo}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        type: 'argumentative',
        subject: 'Test quota',
        level: 'beginner'
      })
    });

    if (demoQuotaResponse.status === 403 || demoQuotaResponse.status === 429) {
      console.log('‚úÖ Quota correctement appliqu√© pour utilisateur demo');
    } else {
      console.log('‚ö†Ô∏è Quota non appliqu√© pour utilisateur demo');
    }

    // 7. Test de v√©rification d'abonnement
    console.log('\n7Ô∏è‚É£ Test de v√©rification d\'abonnement...');
    
    const currentSubResponse = await fetch(`${BASE_URL}/api/subscription/current`, {
      headers: { 
        'Authorization': `Bearer ${tokens.premium}`,
        'Content-Type': 'application/json'
      }
    });

    if (currentSubResponse.ok) {
      const subData = await currentSubResponse.json();
      console.log('‚úÖ Abonnement actuel r√©cup√©r√©');
      console.log(`   - Plan: ${subData.data.plan}`);
      console.log(`   - Statut: ${subData.data.status}`);
      console.log(`   - Expire le: ${new Date(subData.data.endDate).toLocaleDateString('fr-FR')}`);
    }

    console.log('\nüéâ TOUS LES TESTS PREMIUM SONT PASS√âS !');
    console.log('\nüìä R√©sum√©:');
    console.log('   ‚úÖ Syst√®me d\'abonnements fonctionnel');
    console.log('   ‚úÖ Protection des fonctionnalit√©s premium');
    console.log('   ‚úÖ Assistant de dissertation op√©rationnel');
    console.log('   ‚úÖ Quotas et limites respect√©s');
    console.log('   ‚úÖ G√©n√©ration de plans et analyse fonctionnelles');
    console.log('\nüöÄ Votre syst√®me premium est pr√™t !');

  } catch (error) {
    console.error('\n‚ùå ERREUR LORS DU TEST PREMIUM:', error.message);
    console.log('\nüîß Actions recommand√©es:');
    console.log('   1. V√©rifiez que le serveur backend est d√©marr√©');
    console.log('   2. V√©rifiez la configuration des APIs IA (OPENAI_API_KEY)');
    console.log('   3. V√©rifiez que la base de donn√©es est synchronis√©e');
    console.log('   4. V√©rifiez les logs: npm run logs');
    process.exit(1);
  }
}

if (require.main === module) {
  testPremiumFeatures();
}

module.exports = { testPremiumFeatures };
