// src/services/aiService.js
const OpenAI = require('openai');
const { Anthropic } = require('@anthropic-ai/sdk');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

class AIService {
  constructor() {
    this.openai = process.env.OPENAI_API_KEY ? new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    }) : null;
    
    this.anthropic = process.env.ANTHROPIC_API_KEY ? new Anthropic({
      apiKey: process.env.ANTHROPIC_API_KEY
    }) : null;
    
    this.provider = process.env.AI_PROVIDER || 'openai';
    
    // Log pour debug
    console.log('ü§ñ AIService initialis√©:', {
      hasOpenAI: !!this.openai,
      hasAnthropic: !!this.anthropic,
      provider: this.provider
    });
  }

  async generateResponse(message, options = {}) {
    const {
      context = '',
      conversationHistory = [],
      userId = null
    } = options;

    try {
      // R√©cup√©rer le profil utilisateur et les donn√©es de t√©l√©m√©trie
      const userProfile = await this.getUserProfile(userId);
      const errorPatterns = await this.getUserErrorPatterns(userId);
      
      // Construire le contexte enrichi
      const enrichedContext = this.buildEnrichedContext(userProfile, errorPatterns, context);

      // Choisir le provider selon la configuration
      if (this.provider === 'anthropic' && this.anthropic) {
        return await this.generateWithAnthropic(message, enrichedContext, conversationHistory, userProfile);
      } else if (this.openai) {
        return await this.generateWithOpenAI(message, enrichedContext, conversationHistory, userProfile);
      }
      
      // Fallback sur une r√©ponse basique
      return this.generateBasicResponse(message);
      
    } catch (error) {
      console.error('Erreur g√©n√©ration r√©ponse IA:', error);
      return this.generateBasicResponse(message);
    }
  }

  async generateWithOpenAI(message, context, conversationHistory, userProfile) {
    const systemPrompt = this.buildSystemPrompt(userProfile, context);

    const messages = [
      { role: 'system', content: systemPrompt },
      ...conversationHistory.map(msg => ({
        role: msg.role,
        content: msg.content
      })),
      { role: 'user', content: message }
    ];

    const response = await this.openai.chat.completions.create({
      model: "gpt-4",
      messages,
      max_tokens: 1000,
      temperature: 0.7
    });

    return {
      content: response.choices[0].message.content,
      context: {
        model: 'gpt-4',
        tokens: response.usage?.total_tokens || 0
      }
    };
  }

  async generateWithAnthropic(message, context, conversationHistory, userProfile) {
    const systemPrompt = this.buildSystemPrompt(userProfile, context);

    const conversationText = conversationHistory
      .map(msg => `${msg.role}: ${msg.content}`)
      .join('\n');

    const fullMessage = conversationText 
      ? `${conversationText}\n\nuser: ${message}`
      : message;

    const response = await this.anthropic.messages.create({
      model: "claude-3-sonnet-20240229",
      max_tokens: 1000,
      system: systemPrompt,
      messages: [{ role: "user", content: fullMessage }]
    });

    return {
      content: response.content[0].text,
      context: {
        model: 'claude-3-sonnet',
        tokens: response.usage?.input_tokens + response.usage?.output_tokens || 0
      }
    };
  }

  // M√©thodes utilitaires pour enrichir le contexte
  async getUserProfile(userId) {
    if (!userId) return null;
    
    try {
      const user = await prisma.user.findUnique({
        where: { id: userId },
        include: { 
          progress: true,
          subscription: true 
        }
      });
      
      return user ? {
        level: user.progress?.level || 1,
        accuracy: user.progress?.accuracy || 0,
        exercisesCompleted: user.progress?.exercisesCompleted || 0,
        currentStreak: user.progress?.currentStreak || 0,
        plan: user.subscription?.plan || 'demo'
      } : null;
    } catch (error) {
      console.error('Erreur r√©cup√©ration profil utilisateur:', error);
      return null;
    }
  }

  async getUserErrorPatterns(userId) {
    if (!userId) return [];
    
    try {
      const errorEvents = await prisma.telemetryEvent.findMany({
        where: {
          userId,
          type: 'question_completed',
          createdAt: {
            gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // 30 derniers jours
          }
        },
        take: 50
      });

      const errorPatterns = {};
      errorEvents.forEach(event => {
        try {
          const data = JSON.parse(event.data);
          if (!data.isCorrect) {
            const key = `${event.exerciseId}_error`;
            if (!errorPatterns[key]) {
              errorPatterns[key] = { count: 0, exerciseId: event.exerciseId };
            }
            errorPatterns[key].count++;
          }
        } catch (e) {
          // Ignorer les donn√©es malform√©es
        }
      });

      return Object.values(errorPatterns).sort((a, b) => b.count - a.count).slice(0, 5);
    } catch (error) {
      console.error('Erreur r√©cup√©ration patterns erreur:', error);
      return [];
    }
  }

  buildEnrichedContext(userProfile, errorPatterns, originalContext) {
    let context = originalContext || '';
    
    if (userProfile) {
      context += `\n\nProfil utilisateur:
- Niveau: ${userProfile.level}
- Pr√©cision: ${Math.round(userProfile.accuracy)}%
- Exercices compl√©t√©s: ${userProfile.exercisesCompleted}
- S√©rie actuelle: ${userProfile.currentStreak} jours
- Plan: ${userProfile.plan}`;
    }

    if (errorPatterns.length > 0) {
      context += `\n\nErreurs fr√©quentes d√©tect√©es:
${errorPatterns.map(pattern => `- Exercice ${pattern.exerciseId}: ${pattern.count} erreurs`).join('\n')}`;
    }

    return context;
  }

  buildSystemPrompt(userProfile, context) {
    const basePrompt = `Vous √™tes un tuteur de fran√ßais expert et bienveillant. Votre mission est d'aider l'utilisateur √† am√©liorer son fran√ßais de mani√®re personnalis√©e et efficace.

R√àGLES IMPORTANTES:
1. Adaptez votre niveau de langue au niveau de l'utilisateur
2. Soyez encourageant et positif dans vos r√©ponses
3. Donnez des explications claires et concises
4. Proposez des exemples pratiques
5. Corrigez les erreurs avec bienveillance
6. R√©pondez UNIQUEMENT en fran√ßais
7. Si l'utilisateur pose une question en anglais, r√©pondez en fran√ßais mais mentionnez que vous pr√©f√©rez le fran√ßais

STYLE DE COMMUNICATION:
- Utilisez un ton amical et professionnel
- Employez des phrases courtes et claires
- Donnez des exemples concrets
- Encouragez la pratique r√©guli√®re
- F√©licitez les progr√®s`;

    if (userProfile) {
      const levelGuidance = this.getLevelGuidance(userProfile.level);
      const accuracyGuidance = this.getAccuracyGuidance(userProfile.accuracy);
      
      return `${basePrompt}

PROFIL DE L'UTILISATEUR:
${levelGuidance}
${accuracyGuidance}

CONTEXTE SP√âCIFIQUE:
${context}

R√©pondez en tenant compte de ce profil pour personnaliser votre aide.`;
    }

    return `${basePrompt}

CONTEXTE:
${context}

Aidez l'utilisateur √† am√©liorer son fran√ßais de mani√®re adapt√©e √† son niveau.`;
  }

  getLevelGuidance(level) {
    const guidance = {
      1: "Niveau d√©butant: Utilisez un vocabulaire simple, des phrases courtes, et expliquez les concepts de base.",
      2: "Niveau interm√©diaire: Vous pouvez utiliser un vocabulaire plus riche et aborder des concepts plus complexes.",
      3: "Niveau avanc√©: Vous pouvez discuter de nuances linguistiques et de subtilit√©s du fran√ßais."
    };
    return guidance[level] || guidance[1];
  }

  getAccuracyGuidance(accuracy) {
    if (accuracy < 50) {
      return "L'utilisateur a des difficult√©s importantes. Concentrez-vous sur les bases et encouragez beaucoup.";
    } else if (accuracy < 75) {
      return "L'utilisateur progresse bien. Vous pouvez introduire des concepts plus avanc√©s progressivement.";
    } else {
      return "L'utilisateur a un bon niveau. Vous pouvez aborder des subtilit√©s et des nuances du fran√ßais.";
    }
  }

  generateBasicResponse(message) {
    // R√©ponses basiques pour les cas o√π les APIs IA ne sont pas disponibles
    const responses = [
      "Je suis l√† pour vous aider avec votre fran√ßais ! Pouvez-vous me donner plus de contexte sur ce que vous souhaitez apprendre ?",
      "C'est une excellente question ! Pour vous donner la meilleure r√©ponse, pourriez-vous pr√©ciser votre niveau de fran√ßais ?",
      "Je comprends votre question. Malheureusement, je ne peux pas acc√©der aux services IA en ce moment, mais je peux vous orienter vers des ressources utiles.",
      "Merci pour votre message ! Pour vous aider efficacement, pourriez-vous me dire quel aspect du fran√ßais vous souhaitez am√©liorer ?"
    ];

    const randomResponse = responses[Math.floor(Math.random() * responses.length)];
    
    return {
      content: randomResponse,
      context: {
        model: 'basic',
        fallback: true
      }
    };
  }

  async analyzeTextComplexity(text) {
    // Analyser la complexit√© du texte pour adapter les r√©ponses
    const wordCount = text.split(/\s+/).length;
    const sentenceCount = text.split(/[.!?]+/).length;
    const avgWordsPerSentence = wordCount / sentenceCount;
    
    let complexity = 'beginner';
    if (avgWordsPerSentence > 15) complexity = 'advanced';
    else if (avgWordsPerSentence > 10) complexity = 'intermediate';
    
    return {
      wordCount,
      sentenceCount,
      avgWordsPerSentence,
      complexity
    };
  }
}

module.exports = {
  aiService: new AIService()
};
