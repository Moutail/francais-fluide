#!/usr/bin/env node

// Test complet des fonctionnalit√©s d'administration
const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3001';
let adminToken = null;

async function testAdminFunctionality() {
  console.log('üîê Test complet des fonctionnalit√©s d\'administration\n');

  try {
    // 1. Test de connexion admin
    console.log('1Ô∏è‚É£ Test de connexion administrateur...');
    const loginResponse = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'admin@francaisfluide.com',
        password: 'Test!1234'
      })
    });

    const loginData = await loginResponse.json();
    if (!loginData.success) {
      throw new Error(`Connexion admin √©chou√©e: ${loginData.error}`);
    }

    adminToken = loginData.token;
    console.log('‚úÖ Connexion admin r√©ussie');
    console.log('   - R√¥le:', loginData.user.role || 'Non d√©fini');

    // 2. Test d'acc√®s au dashboard admin
    console.log('\n2Ô∏è‚É£ Test d\'acc√®s au dashboard admin...');
    const dashboardResponse = await fetch(`${BASE_URL}/api/admin/dashboard`, {
      headers: { 
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json'
      }
    });

    if (!dashboardResponse.ok) {
      throw new Error(`Acc√®s dashboard refus√©: ${dashboardResponse.status}`);
    }

    const dashboardData = await dashboardResponse.json();
    console.log('‚úÖ Dashboard admin accessible');
    console.log('   - Utilisateurs totaux:', dashboardData.data.overview.totalUsers);
    console.log('   - Abonnements actifs:', dashboardData.data.overview.activeSubscriptions);
    console.log('   - Tickets support:', dashboardData.data.overview.openSupportTickets);

    // 3. Test de cr√©ation d'utilisateur
    console.log('\n3Ô∏è‚É£ Test de cr√©ation d\'utilisateur...');
    const testUser = {
      name: 'Test User Admin',
      email: `test-admin-${Date.now()}@example.com`,
      password: 'TestPassword123!',
      role: 'tester',
      subscriptionPlan: 'premium'
    };

    const createUserResponse = await fetch(`${BASE_URL}/api/admin/users`, {
      method: 'POST',
      headers: { 
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testUser)
    });

    const createUserData = await createUserResponse.json();
    if (!createUserData.success) {
      throw new Error(`Cr√©ation utilisateur √©chou√©e: ${createUserData.error}`);
    }

    console.log('‚úÖ Cr√©ation d\'utilisateur r√©ussie');
    console.log('   - ID:', createUserData.data.id);
    console.log('   - Nom:', createUserData.data.name);
    console.log('   - R√¥le:', createUserData.data.role);

    const createdUserId = createUserData.data.id;

    // 4. Test de r√©cup√©ration des utilisateurs
    console.log('\n4Ô∏è‚É£ Test de r√©cup√©ration des utilisateurs...');
    const usersResponse = await fetch(`${BASE_URL}/api/admin/users?limit=5`, {
      headers: { 
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json'
      }
    });

    const usersData = await usersResponse.json();
    if (!usersData.success) {
      throw new Error(`R√©cup√©ration utilisateurs √©chou√©e: ${usersData.error}`);
    }

    console.log('‚úÖ R√©cup√©ration utilisateurs r√©ussie');
    console.log('   - Nombre d\'utilisateurs:', usersData.data.users.length);
    console.log('   - Pagination:', usersData.data.pagination.total, 'au total');

    // 5. Test de modification d'utilisateur
    console.log('\n5Ô∏è‚É£ Test de modification d\'utilisateur...');
    const updateUserResponse = await fetch(`${BASE_URL}/api/admin/users/${createdUserId}`, {
      method: 'PUT',
      headers: { 
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        name: 'Test User Modified',
        isActive: true
      })
    });

    const updateUserData = await updateUserResponse.json();
    if (!updateUserData.success) {
      throw new Error(`Modification utilisateur √©chou√©e: ${updateUserData.error}`);
    }

    console.log('‚úÖ Modification utilisateur r√©ussie');
    console.log('   - Nouveau nom:', updateUserData.data.name);

    // 6. Test d'acc√®s aux nouvelles routes
    console.log('\n6Ô∏è‚É£ Test des nouvelles routes...');
    
    const routesToTest = [
      '/api/achievements',
      '/api/calendar',
      '/api/dictations'
    ];

    for (const route of routesToTest) {
      const response = await fetch(`${BASE_URL}${route}`, {
        headers: { 
          'Authorization': `Bearer ${adminToken}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        console.log(`‚úÖ Route ${route} accessible`);
      } else {
        console.log(`‚ö†Ô∏è Route ${route} - Status: ${response.status}`);
      }
    }

    // 7. Test de protection contre acc√®s non autoris√©
    console.log('\n7Ô∏è‚É£ Test de protection des routes admin...');
    const unauthorizedResponse = await fetch(`${BASE_URL}/api/admin/dashboard`, {
      headers: { 
        'Authorization': 'Bearer token-invalide',
        'Content-Type': 'application/json'
      }
    });

    if (unauthorizedResponse.status === 401 || unauthorizedResponse.status === 403) {
      console.log('‚úÖ Protection contre acc√®s non autoris√© fonctionnelle');
    } else {
      console.log('‚ö†Ô∏è Protection insuffisante - v√©rifier la s√©curit√©');
    }

    // 8. Nettoyage : supprimer l'utilisateur de test
    console.log('\n8Ô∏è‚É£ Nettoyage des donn√©es de test...');
    const deleteResponse = await fetch(`${BASE_URL}/api/admin/users/${createdUserId}`, {
      method: 'DELETE',
      headers: { 
        'Authorization': `Bearer ${adminToken}`,
        'Content-Type': 'application/json'
      }
    });

    if (deleteResponse.ok) {
      console.log('‚úÖ Nettoyage r√©ussi - utilisateur de test supprim√©');
    }

    console.log('\nüéâ TOUS LES TESTS D\'ADMINISTRATION SONT PASS√âS !');
    console.log('\nüìä R√©sum√©:');
    console.log('   ‚úÖ Authentification admin fonctionnelle');
    console.log('   ‚úÖ Dashboard accessible');
    console.log('   ‚úÖ Gestion des utilisateurs op√©rationnelle');
    console.log('   ‚úÖ Nouvelles routes API fonctionnelles');
    console.log('   ‚úÖ S√©curit√© et permissions correctes');
    console.log('\nüöÄ Votre interface d\'administration est pr√™te !');
    console.log('\nüåê Acc√®s:');
    console.log('   ‚Ä¢ Interface admin: http://localhost:3000/admin');
    console.log('   ‚Ä¢ Login admin: admin@francaisfluide.com / Test!1234');

  } catch (error) {
    console.error('\n‚ùå ERREUR LORS DU TEST ADMIN:', error.message);
    console.log('\nüîß Actions recommand√©es:');
    console.log('   1. V√©rifiez que le serveur backend est d√©marr√©');
    console.log('   2. Cr√©ez un administrateur avec: npm run create-admin');
    console.log('   3. V√©rifiez que la base de donn√©es est synchronis√©e: npm run db:push');
    console.log('   4. V√©rifiez les logs: npm run logs');
    process.exit(1);
  }
}

if (require.main === module) {
  testAdminFunctionality();
}

module.exports = { testAdminFunctionality };
